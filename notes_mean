#TAR
#.tar.gz (też .tgz):
#z - filtrowanie grzez gzip (kompresja i extract)
#v - verbose
#x - extract
#f - podaj plik
#c - create archive
#czf - create-ze-file
#xzf - extract-ze-file
#t - wyświetl zawartość
#r - bezwarunkowe dołączanie plików do archiwum
#u - dołączanie do archiwum tylko nowszych odpowiedników
#j - użycie bzip2
#Z - użycie compress
#J - użycie xz
#--lzma - użycie lzma
#.tar.bz2 (bzip2), .tar.Z (compress), .tar.lzma
#skompresowane pliki tar są nazywane tarball
#-C <path> - wypakowanie do podanej ścieżki

#MONGODB
#MongoDB 3.0.7 - zawartość folderów do /usr/<foldery>
#w ten sposób zainstalujemy najwięcej pakietów, więcej niż z mongodb*
sudo dnf install mongo*
#tworzymy i uprawniamy domyślny dla mongo folder do przechowywania plików
sudo mkdir -p /data/db
sudo chown -R gulci /data/db
#uruchamiamy usługę, która nasłuchuje na porcie 27017
mongod
#wchodzimy do shella i sprawdzamy bazę testową - test
mongo
#tworzymy nową kolekcję artykułów i wkładamy tam obiekt JSON, który zawiera właściwość title
db.articles.insert({title: "Hello World"})
db.articles.find()

#NODE.JS
#wersja 0.10.36
sudo dnf install nodejs
#node.js 4.2.2 (zawiera npm 2.14.7) - zawartość folderów do /usr/<foldery>
node
console.log("Node is up and running!");
node application.js

#NPM
#lokalizacja globalnych pakietów
#/usr/local/lib/node_modules
#/usr/local to miejsce na twory użytkownika
sudo dnf install npm
sudo npm install -g <Package Unique Name>@<Package Version>
#instalujemy express lokalnie
npm install express --save
#zależności są instalowane w node_modules/express/node_modules
#node_modules można dodać do .gitignore i potem spreparować listę modułów do instalacji - może bower?
#{} - minimum pustego pliku package.json, będą warningi
#--save - dodaje pakiet do sekcji dependencji package.json
#~ w package.json - będzie robił update wersji minor
#^ w package.json - będzie robił update wersji major
npm install angular@1.4.7 --save
npm uninstall <Package Unique Name>
sudo npm uninstall -g <Package Unique Name>
#robi update nawet jeśli nie mamy tego pakietu, po prostu go ściągnie
npm update <Package Unique Name>
sudo npm update -g <Package Unique Name>
#w packages.json wersja może być "latest"
npm init
npm help json
#z poziomu root projektu - instaluje zależności z package.json, lepiej użyć update, będziemy mieli update i instalację nieistniejących pakietów
npm install
npm update
